"""
This module defines the `TaskTreeChain` class, which manages the logic for creating, updating,
and maintaining a task tree for penetration testing. It uses a conversational model (LLM)
to interpret and enhance the task chain dynamically based on user interactions and tool outputs.

Dependencies:
    - langchain_core: Contains the base classes for messages and the conversational model.
    - langchain_openai: Contains the OpenAI conversational model implementation.
    - prompts: Contains the base system prompt and context prompt for the conversational model.

Environment Variables:
    - OPENROUTER_API_KEY: The API key for the OpenAI conversational model.

Classes:
    - TaskTreeChain: Manages the task tree during penetration testing using a conversational LLM.
"""



import os

from langchain_core.messages import SystemMessage, HumanMessage
from langchain_openai import ChatOpenAI
from prompts import BASE_SYSTEM_PROMPT, CONTEXT_PROMPT


class TaskTreeChain:
    """
    The `TaskTreeChain` class is responsible for managing the task tree during penetration testing.

    It initializes a task tree based on a target system and dynamically updates it based on output
    from commands or tools. This involves interacting with a conversational LLM to generate and enhance
    the task tree, ensuring that it stays relevant to the penetration testing process.

    Attributes:
        llm (ChatOpenAI): The conversational model instance that evaluates and updates the task tree.
        current_task_tree (str): Represents the current state of the task tree.
        system_message (SystemMessage): The initial system message constructed for the LLM based on `BASE_SYSTEM_PROMPT`.

    Methods:
        update_task_tree_with_output(output_text: str) -> str:
            Updates the task tree based on new output results, fetching an updated tree from the LLM.

        get_current_task_tree() -> str:
            Returns the current task tree.

        get_next_command() -> str | None:
            Extracts the next command to run from the task tree, if available.
    """

    def __init__(self, target: str):
        """
        Initializes the `TaskTreeChain` object.

        Sets up the initial task tree using the `ChatOpenAI` conversational model. The task tree
        is constructed based on the specified target, creating context for further penetration testing.

        Args:
            target (str): The target system for penetration testing, to be included in the base system prompt.

        Attributes Created:
            llm (ChatOpenAI): The conversational model instance that generates and maintains the task tree.
            current_task_tree (str): Initial output of the task tree generated by the conversational model.
            system_message (SystemMessage): The system message created using the target and `BASE_SYSTEM_PROMPT`.

        Raises:
            Exception: If the LLM fails to generate the initial task tree.
        """
        # Conversation model
        self.llm = ChatOpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY"),
            model="google/gemini-pro-1.5"
        )

        self.current_task_tree = ""

        # Initialize the conversation
        self.system_message = SystemMessage(content=BASE_SYSTEM_PROMPT.format(target=target))

        # Generate the initial task tree
        response = self.llm.invoke([self.system_message])
        self.current_task_tree = response.content

    def update_task_tree_with_output(self, output_text: str) -> str:
        """
        Updates the task tree with the latest results from a tool output (e.g., command execution).

        The method creates synergy between the current task tree and the output from a tool or command.
        It sends the combined context (current task tree + tool output) to the LLM to get an updated task tree.

        Args:
            output_text (str): The output result of a command or tool to incorporate into the task tree.

        Returns:
            str: The updated task tree content.

        Raises:
            Exception: If fetching the updated task tree from the LLM fails.
        """
        # Create a context from the current task tree and results
        context = (f"Current Task Tree:\n"
                   f"{self.current_task_tree}\n\n"
                   f"Tool Output:\n"
                   f"{output_text}")

        # Format context prompt
        context_prompt = HumanMessage(content=CONTEXT_PROMPT.format(context=context))

        # Invoke the LLM with the combined context and system message
        response = self.llm.invoke([self.system_message, context_prompt])

        # Update the local tree
        self.current_task_tree = response.content
        return self.current_task_tree

    def get_current_task_tree(self) -> str:
        """
        Retrieves the current state of the task tree.

        The task tree represents the step-by-step progress and plans during penetration testing.

        Returns:
            str: The current task tree.
        """
        return self.current_task_tree

    def get_next_command(self) -> str | None:
        """
        Extracts the next command to run from the current task tree.

        The method looks for a line in the task tree that starts with "Run command:" or
        "`Run command:`" and removes any surrounding backticks from the extracted command.

        Returns:
            str | None: The next command to run as a string, or None if no command is found.
        """
        lines = self.current_task_tree.strip().splitlines()
        command = None
        for line in reversed(lines):
            if line.startswith("Run command:") and len(line) > 12:
                command = line[12:].strip()
            elif line.startswith("`Run command:") and len(line) > 13:
                command = line[13:].strip()

            if command.startswith("`"):
                command = command[1:]
            if command.endswith("`"):
                command = command[:-1]
            return command